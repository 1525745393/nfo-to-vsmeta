import argparse
import concurrent.futures
import json
import os
import re
import time
from datetime import datetime

def load_config(file_path):
    with open(file_path, "r", encoding="utf-8") as f:
        return json.load(f)

def load_root_paths_from_file(file_path):
    with open(file_path, "r", encoding="utf-8") as f:
        return [line.strip() for line in f if line.strip()]

def should_skip_dir(path, skip_dirs):
    return any(skip in path for skip in skip_dirs)

def find_video_files(root_paths, skip_dirs, recursive):
    video_extensions = (".mp4", ".mkv", ".avi")
    files = []
    for root in root_paths:
        for dirpath, dirnames, filenames in os.walk(root):
            if should_skip_dir(dirpath, skip_dirs):
                continue
            for filename in filenames:
                if filename.lower().endswith(video_extensions):
                    files.append(os.path.join(dirpath, filename))
            if not recursive:
                break
    return files

def process_video(file_path, only_missing, overwrite, delete_nfo, log_lines):
    base, _ = os.path.splitext(file_path)
    vsmeta_path = base + ".vsmeta"
    nfo_path = base + ".nfo"

    if only_missing and os.path.exists(vsmeta_path):
        return "skipped", f"{file_path} 已存在 .vsmeta，跳过"

    if not os.path.exists(nfo_path):
        return "fail", f"{file_path} 缺少 .nfo 文件"

    try:
        with open(nfo_path, "r", encoding="utf-8") as nf:
            content = nf.read()
        title = re.search(r"<title>(.*?)</title>", content)
        plot = re.search(r"<plot>(.*?)</plot>", content)
        actor = re.findall(r"<actor>.*?<name>(.*?)</name>.*?</actor>", content, re.DOTALL)
        tags = re.findall(r"<tag>(.*?)</tag>", content)

        vsmeta = {
            "title": title.group(1) if title else "",
            "plot": plot.group(1) if plot else "",
            "actors": actor,
            "tags": tags
        }

        if os.path.exists(vsmeta_path) and not overwrite:
            return "skipped", f"{file_path} 已存在 .vsmeta，未覆盖"

        with open(vsmeta_path, "w", encoding="utf-8") as vf:
            json.dump(vsmeta, vf, ensure_ascii=False, indent=2)

        if delete_nfo:
            os.remove(nfo_path)

        return "success", f"{file_path} 转换成功"
    except Exception as e:
        return "fail", f"{file_path} 转换失败：{str(e)}"

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("--root", nargs="*", help="扫描目录路径")
    parser.add_argument("--root-file", help="路径列表文件")
    parser.add_argument("--config", help="读取配置文件")
    parser.add_argument("--threads", type=int, default=4)
    parser.add_argument("--only-missing", action="store_true")
    parser.add_argument("--overwrite", action="store_true")
    parser.add_argument("--delete-nfo", action="store_true")
    parser.add_argument("--no-recursive", action="store_true")
    parser.add_argument("--skip-dirs", nargs="*", default=[])
    parser.add_argument("--force-refresh", nargs="*", default=[])
    args = parser.parse_args()

    config = {}
    if args.config:
        config = load_config(args.config)

    root_paths = args.root or config.get("root") or []
    if args.root_file:
        root_paths.extend(load_root_paths_from_file(args.root_file))

    if not root_paths:
        print("未指定扫描目录")
        return

    threads = args.threads or config.get("threads", 4)
    only_missing = args.only_missing or config.get("only_missing", False)
    overwrite = args.overwrite or config.get("overwrite", False)
    delete_nfo = args.delete_nfo or config.get("delete_nfo", False)
    recursive = not args.no_recursive
    skip_dirs = args.skip_dirs or config.get("skip_dirs", [])
    force_refresh = args.force_refresh or config.get("force_refresh", [])

    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    log_file = f"vsmeta_log_{timestamp}.log"
    log_lines = []
    results = {"success": 0, "fail": 0, "skipped": 0}

    video_files = find_video_files(root_paths, skip_dirs, recursive)

    def task(file_path):
        status, msg = process_video(file_path, only_missing, overwrite, delete_nfo, log_lines)
        results[status] += 1
        log_lines.append(msg)

    with concurrent.futures.ThreadPoolExecutor(max_workers=threads) as executor:
        executor.map(task, video_files)

    summary = (
        f"\n处理完成：总数 {len(video_files)}，成功 {results['success']}，"
        f"失败 {results['fail']}，跳过 {results['skipped']}"
    )
    log_lines.append(summary)

    with open(log_file, "w", encoding="utf-8") as lf:
        lf.write("\n".join(log_lines))

    print(summary)
    print(f"详细日志保存在：{log_file}")

if __name__ == "__main__":
    main()