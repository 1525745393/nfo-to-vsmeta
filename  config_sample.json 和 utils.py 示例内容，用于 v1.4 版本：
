以下是配套的 config_sample.json 和 utils.py 示例内容，用于 v1.4 版本：


---

config_sample.json（配置文件样例）

{
  "roots": ["D:/Videos", "E:/AV"],
  "skip_dirs": ["@eaDir", "backup"],
  "only_missing": true,
  "overwrite_vsmeta": false,
  "delete_nfo": false,
  "log_dir": "logs",
  "no_recursive": false
}

> **说明：**你可以将此文件保存为 config.json 并通过 --config config.json 参数调用。




---

utils.py（工具函数模块）

import os

def scan_video_files(root, skip_dirs, recursive=True):
    video_exts = ('.mp4', '.mkv', '.avi', '.mov', '.wmv')
    result = []

    for dirpath, dirnames, filenames in os.walk(root):
        if any(skip in dirpath for skip in skip_dirs):
            continue
        for filename in filenames:
            if filename.lower().endswith(video_exts):
                result.append(os.path.join(dirpath, filename))
        if not recursive:
            break
    return result

def convert_nfo_to_vsmeta(video_path, only_missing=False, overwrite=False, delete_nfo=False, force_refresh=False):
    nfo_path = os.path.splitext(video_path)[0] + ".nfo"
    vsmeta_path = os.path.splitext(video_path)[0] + ".vsmeta"

    if only_missing and os.path.exists(vsmeta_path):
        return False
    if not os.path.exists(nfo_path):
        return False
    if os.path.exists(vsmeta_path) and not overwrite:
        return False

    try:
        with open(nfo_path, "r", encoding="utf-8") as nfo:
            content = nfo.read()

        with open(vsmeta_path, "w", encoding="utf-8") as vsmeta:
            vsmeta.write(content)  # 实际逻辑可替换为标准格式转换

        if delete_nfo:
            os.remove(nfo_path)

        return True
    except Exception as e:
        raise RuntimeError(f"转换失败: {str(e)}")

def write_log(log_file, lines):
    with open(log_file, "w", encoding="utf-8") as f:
        if isinstance(lines, list):
            f.write("\n".join(lines))
        else:
            f.write(str(lines))

def load_config(config_path):
    import json
    if os.path.exists(config_path):
        with open(config_path, "r", encoding="utf-8") as f:
            return json.load(f)
    return {}


---

